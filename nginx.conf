# setup nginx as a reverse proxy
# it's almost identical to the webserver configuraition
# to run, don't forget to change the name of the file to nginx.conf

http {
    # the load balancer balances the load between each different server
    # for a microservice architecture, these are assumed to be different dockerized instances of identical services
    # the load balancer will cycle thru these one by one
    # multiple different upstreams can be setup, even if they include the same servers as another one
    upstream allbackend{
        # ip_hash uses consistent hashing to attach a given client to a given service, depending o it's IP address
        # in this way, the same client will always access the same server
        # useful for stateful connections. But not very reliable because if the server dies, the client loses the conenction, and possibly some data.
        ip_hash;
        server 127.0.0.1:2222;
        server 127.0.0.1:3333;
        server 127.0.0.1:4444;
        server 127.0.0.1:5555;
    }

    # TSL (ssl for backwards compatibility) certificates can also be applied with the syntax:
    # listen 443 ssl;
    # you can also do: listen 223 ssl http2; to use http2
    # ssl_certificate /path/to/ssl/certificate;
    # ssl_certificate_key /path/to/ssl/certificate/key;
    # ssl_protocols TLSv1.3;
    server{
        listen 80;
        location / {
            proxy_pass http://allbackend/;
        }
    }
}

events { }